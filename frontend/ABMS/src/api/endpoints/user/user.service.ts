/**
 * Generated by orval 7.3.0
 */
import {
  HttpClient
} from '@angular/common/http'
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http'
import {
  Injectable
} from '@angular/core'
import {
  Observable
} from 'rxjs'
import type {
  AddFavoriteResponse,
  CheckOrAddUserCommand,
  CheckOrAddUserResponse,
  EditUserDto,
  EditUserResponse,
  GetBookingsResponse
} from '../../model'


type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class UserApiService {
  constructor(
    private http: HttpClient,
  ) {} checkOrAdd<TData = CheckOrAddUserResponse>(
    checkOrAddUserCommand: CheckOrAddUserCommand, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    checkOrAdd<TData = CheckOrAddUserResponse>(
    checkOrAddUserCommand: CheckOrAddUserCommand, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    checkOrAdd<TData = CheckOrAddUserResponse>(
    checkOrAddUserCommand: CheckOrAddUserCommand, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;checkOrAdd<TData = CheckOrAddUserResponse>(
    checkOrAddUserCommand: CheckOrAddUserCommand, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `/user/checkOrAdd`,
      checkOrAddUserCommand,options
    );
  }
 favorites<TData = AddFavoriteResponse>(
    favoritesBody: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    favorites<TData = AddFavoriteResponse>(
    favoritesBody: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    favorites<TData = AddFavoriteResponse>(
    favoritesBody: number, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;favorites<TData = AddFavoriteResponse>(
    favoritesBody: number, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `/user/favorites`,
      favoritesBody,options
    );
  }
 update<TData = EditUserResponse>(
    editUserDto: EditUserDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    update<TData = EditUserResponse>(
    editUserDto: EditUserDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    update<TData = EditUserResponse>(
    editUserDto: EditUserDto, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;update<TData = EditUserResponse>(
    editUserDto: EditUserDto, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `/user/update`,
      editUserDto,options
    );
  }
 bookings<TData = GetBookingsResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    bookings<TData = GetBookingsResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    bookings<TData = GetBookingsResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;bookings<TData = GetBookingsResponse>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/user/bookings`,options
    );
  }
};

export type CheckOrAddClientResult = NonNullable<CheckOrAddUserResponse>
export type FavoritesClientResult = NonNullable<AddFavoriteResponse>
export type UpdateClientResult = NonNullable<EditUserResponse>
export type BookingsClientResult = NonNullable<GetBookingsResponse>
